import psycopg2
from dotenv import load_dotenv
from psycopg2.extensions import ISOLATION_LEVEL_AUTOCOMMIT  # <-- ADD THIS LINE
import os
import json

load_dotenv()

db_name = os.environ.get("POSTGRESQL_DBNAME")
db_user = os.environ.get("POSTGRESQL_USER")
db_password = os.environ.get("POSTGRESQL_PASSWORD")
host = os.environ.get("POSTGRESQL_HOST")


class Database:
    def __init__(self):
        try:
            self.conn = psycopg2.connect(
                database=db_name,
                host=host,
                user=db_user,
                password=db_password,
                port=5432,
            )
            self.conn.set_isolation_level(
                ISOLATION_LEVEL_AUTOCOMMIT
            )  # <-- ADD THIS LINE
        except:
            self.conn = None
        '''cur = self.conn.cursor()
        cur.execute("DROP TABLE users")
        cur.execute(
            """CREATE TABLE users (
    id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_name TEXT NOT NULL,
    password TEXT NOT NULL,
    nickname TEXT,
    rating INT
);"""
        )
        self.conn.commit()'''

    def user_exist(self, user_name):
        try:
            cur = self.conn.cursor()

            cur.execute(
                "SELECT nickname FROM users WHERE user_name = '{}'".format(
                    user_name
                ),  # Pass user_name as a tuple
            )
            res = cur.fetchone()

            if res:
                return True
            print(39, "res is None")
            return False
        except Exception as e:
            print(42, e)
            return False

    def get_last_index(self):
        try:
            cur = self.conn.cursor()

            cur.execute("SELECT id FROM users")

            res = cur.fetchall()
            if res:
                print(51, res[-1])
                return res[-1][0]
            return -1
        except Exception as e:
            print(56, e)
            return None

    def set_nickname(self, login, new_nickname):
        try:
            cur = self.conn.cursor()
            cur.execute(
                """UPDATE users
                        SET nickname = '{}'
                        WHERE user_name = '{}'""".format(
                    new_nickname, login
                )
            )
            return True
        except Exception as e:
            print(e)
            return False

    def auth(self, login, password):
        try:
            cur = self.conn.cursor()

            cur.execute(
                "SELECT * FROM users WHERE user_name='{}' AND password='{}';".format(
                    login, password
                )
            )

            res = cur.fetchone()

            if res:
                return True
            return False
        except Exception as e:
            print(73, e)
            return False

    def get_user_data(self, user_name):
        try:

            if not self.user_exist(user_name):
                return False

            cur = self.conn.cursor()

            cur.execute(
                "SELECT user_name, rating, balance FROM users WHERE user_name='{}';".format(
                    user_name,
                )
            )

            res = cur.fetchone()
            if res:
                return res
        except Exception as e:
            print(e)
            return

    def get_nickname(self, user_name):
        try:

            if not self.user_exist(user_name):
                return False

            cur = self.conn.cursor()

            cur.execute(
                "SELECT nickname FROM users WHERE user_name='{}';".format(user_name)
            )

            res = cur.fetchone()

            if res:
                return res[0]
        except Exception as e:
            print(96, e)
            return None

    def reg(self, login, password, nickname):
        if self.user_exist(login):
            print("user exisst")
            return False

        try:
            cur = self.conn.cursor()

            cur.execute(
                """INSERT INTO users (user_name, password, nickname, rating, balance)
                VALUES (%s, %s, %s, %s, %s);""",
                (login, password, nickname, 0, 0),
            )
            return True
        except Exception as e:
            raise e
            return False

    def get_rating(self, user_name):
        try:

            if not self.user_exist(user_name):
                return False

            cur = self.conn.cursor()

            cur.execute(
                "SELECT rating FROM users WHERE user_name='{}';".format(user_name)
            )

            res = cur.fetchone()

            if res:
                return res[0]
        except Exception as e:
            print(96, e)
            return None

    def update_rating(self, login, plus):
        try:
            current_rating = self.get_rating()
            cur = self.conn.cursor()
            cur.execute(
                """UPDATE users
                        SET rating = {}
                        WHERE user_name = '{}'""".format(
                    current_rating + plus, login
                )
            )
            return True
        except Exception as e:
            print(e)
            return False

    def get_global_rating(self):
        try:
            cur = self.conn.cursor()
            cur.execute("""SELECT user_name, rating FROM users""")
            res = cur.fetchall()
            return res
        except Exception as e:
            print(e)
            return None

    def get_balance(self, user_name):
        try:

            if not self.user_exist(user_name):
                return False

            cur = self.conn.cursor()

            cur.execute(
                "SELECT balance FROM users WHERE user_name='{}';".format(user_name)
            )

            res = cur.fetchone()

            if res:
                return res[0]
        except Exception as e:
            print(96, e)
            return None

    def get_inventory(self, user_name):
        try:

            if not self.user_exist(user_name):
                return False

            cur = self.conn.cursor()

            cur.execute(
                "SELECT inventory FROM users WHERE user_name='{}';".format(user_name)
            )
            res = cur.fetchone()

            if res:
                return res[0]
        except Exception as e:
            print(96, e)
            return None

    def update_inventory(self, user_name, inventory):
        try:
            cur = self.conn.cursor()
            cur.execute(
                """UPDATE users
                        SET inventory = '{}'
                        WHERE user_name = '{}';""".format(
                    json.dumps(inventory), user_name
                )
            )
            self.conn.commit()
            return True
        except Exception as e:
            print(e)
            return False

    def update_balance(self, username, balance):
        try:
            cur = self.conn.cursor()
            cur.execute(
                """UPDATE users
                        SET balance = {}
                        WHERE user_name = '{}';""".format(
                    balance, username
                )
            )
            self.conn.commit()
            return True
        except Exception as e:
            print(e)
            return False


db = Database()
